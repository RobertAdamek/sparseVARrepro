// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppThread.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// VAR_determine_p
int VAR_determine_p(const arma::mat& x, const int& pmax, const int& criterion);
RcppExport SEXP _sparseVARboot_VAR_determine_p(SEXP xSEXP, SEXP pmaxSEXP, SEXP criterionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int& >::type pmax(pmaxSEXP);
    Rcpp::traits::input_parameter< const int& >::type criterion(criterionSEXP);
    rcpp_result_gen = Rcpp::wrap(VAR_determine_p(x, pmax, criterion));
    return rcpp_result_gen;
END_RCPP
}
// determine_block_length
double determine_block_length(const arma::mat& x);
RcppExport SEXP _sparseVARboot_determine_block_length(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(determine_block_length(x));
    return rcpp_result_gen;
END_RCPP
}
// gen_VAR
arma::mat gen_VAR(const arma::mat& u, const arma::mat& ar, const arma::mat& init, const bool& include_init);
RcppExport SEXP _sparseVARboot_gen_VAR(SEXP uSEXP, SEXP arSEXP, SEXP initSEXP, SEXP include_initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type init(initSEXP);
    Rcpp::traits::input_parameter< const bool& >::type include_init(include_initSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_VAR(u, ar, init, include_init));
    return rcpp_result_gen;
END_RCPP
}
// sim_mvn_chol
arma::mat sim_mvn_chol(const arma::mat& Sigma, const unsigned int& T);
RcppExport SEXP _sparseVARboot_sim_mvn_chol(SEXP SigmaSEXP, SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_mvn_chol(Sigma, T));
    return rcpp_result_gen;
END_RCPP
}
// sim_VAR_cpp
arma::mat sim_VAR_cpp(const unsigned int& T, const arma::mat& ar, const arma::mat& Sigma, const unsigned int& burn);
RcppExport SEXP _sparseVARboot_sim_VAR_cpp(SEXP TSEXP, SEXP arSEXP, SEXP SigmaSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_VAR_cpp(T, ar, Sigma, burn));
    return rcpp_result_gen;
END_RCPP
}
// sim_VAR_cpp_both
Rcpp::List sim_VAR_cpp_both(const unsigned int& T, const arma::mat& ar, const arma::mat& Sigma, const unsigned int& burn);
RcppExport SEXP _sparseVARboot_sim_VAR_cpp_both(SEXP TSEXP, SEXP arSEXP, SEXP SigmaSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ar(arSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_VAR_cpp_both(T, ar, Sigma, burn));
    return rcpp_result_gen;
END_RCPP
}
// boot_means_R
Rcpp::List boot_means_R(const arma::mat& x, const arma::mat oracle_A, const arma::mat oracle_u, const int& boot, const int& p, const int& l, const bool& abs_val, const arma::vec& q, const int& B, const bool& show_progress, const int& penalization, const double& nbr_lambdas, const double& lambda_ratio, const int& selection, const double& eps, const bool& pen_own, const bool& only_lag1, const double& c, const unsigned int K, double improvement_thresh, unsigned int Nsim, const double& alpha);
RcppExport SEXP _sparseVARboot_boot_means_R(SEXP xSEXP, SEXP oracle_ASEXP, SEXP oracle_uSEXP, SEXP bootSEXP, SEXP pSEXP, SEXP lSEXP, SEXP abs_valSEXP, SEXP qSEXP, SEXP BSEXP, SEXP show_progressSEXP, SEXP penalizationSEXP, SEXP nbr_lambdasSEXP, SEXP lambda_ratioSEXP, SEXP selectionSEXP, SEXP epsSEXP, SEXP pen_ownSEXP, SEXP only_lag1SEXP, SEXP cSEXP, SEXP KSEXP, SEXP improvement_threshSEXP, SEXP NsimSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type oracle_A(oracle_ASEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type oracle_u(oracle_uSEXP);
    Rcpp::traits::input_parameter< const int& >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const bool& >::type abs_val(abs_valSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const bool& >::type show_progress(show_progressSEXP);
    Rcpp::traits::input_parameter< const int& >::type penalization(penalizationSEXP);
    Rcpp::traits::input_parameter< const double& >::type nbr_lambdas(nbr_lambdasSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_ratio(lambda_ratioSEXP);
    Rcpp::traits::input_parameter< const int& >::type selection(selectionSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type pen_own(pen_ownSEXP);
    Rcpp::traits::input_parameter< const bool& >::type only_lag1(only_lag1SEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type improvement_thresh(improvement_threshSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type Nsim(NsimSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(boot_means_R(x, oracle_A, oracle_u, boot, p, l, abs_val, q, B, show_progress, penalization, nbr_lambdas, lambda_ratio, selection, eps, pen_own, only_lag1, c, K, improvement_thresh, Nsim, alpha));
    return rcpp_result_gen;
END_RCPP
}
// VAR_R
Rcpp::List VAR_R(const arma::mat& y, const int& p, const bool& intercept);
RcppExport SEXP _sparseVARboot_VAR_R(SEXP ySEXP, SEXP pSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool& >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(VAR_R(y, p, intercept));
    return rcpp_result_gen;
END_RCPP
}
// sparseVAR_R
Rcpp::List sparseVAR_R(arma::mat Y, const int& p, const bool& trim, const int& pen, const double& nbr_lambdas, const double& lambda_ratio, const double& eps, const int& selection, const double& c, const unsigned int K, double improvement_thresh, unsigned int Nsim, const double& alpha, const bool& pen_own, const bool& only_lag1);
RcppExport SEXP _sparseVARboot_sparseVAR_R(SEXP YSEXP, SEXP pSEXP, SEXP trimSEXP, SEXP penSEXP, SEXP nbr_lambdasSEXP, SEXP lambda_ratioSEXP, SEXP epsSEXP, SEXP selectionSEXP, SEXP cSEXP, SEXP KSEXP, SEXP improvement_threshSEXP, SEXP NsimSEXP, SEXP alphaSEXP, SEXP pen_ownSEXP, SEXP only_lag1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const bool& >::type trim(trimSEXP);
    Rcpp::traits::input_parameter< const int& >::type pen(penSEXP);
    Rcpp::traits::input_parameter< const double& >::type nbr_lambdas(nbr_lambdasSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_ratio(lambda_ratioSEXP);
    Rcpp::traits::input_parameter< const double& >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const int& >::type selection(selectionSEXP);
    Rcpp::traits::input_parameter< const double& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type improvement_thresh(improvement_threshSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type Nsim(NsimSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type pen_own(pen_ownSEXP);
    Rcpp::traits::input_parameter< const bool& >::type only_lag1(only_lag1SEXP);
    rcpp_result_gen = Rcpp::wrap(sparseVAR_R(Y, p, trim, pen, nbr_lambdas, lambda_ratio, eps, selection, c, K, improvement_thresh, Nsim, alpha, pen_own, only_lag1));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sparseVARboot_VAR_determine_p", (DL_FUNC) &_sparseVARboot_VAR_determine_p, 3},
    {"_sparseVARboot_determine_block_length", (DL_FUNC) &_sparseVARboot_determine_block_length, 1},
    {"_sparseVARboot_gen_VAR", (DL_FUNC) &_sparseVARboot_gen_VAR, 4},
    {"_sparseVARboot_sim_mvn_chol", (DL_FUNC) &_sparseVARboot_sim_mvn_chol, 2},
    {"_sparseVARboot_sim_VAR_cpp", (DL_FUNC) &_sparseVARboot_sim_VAR_cpp, 4},
    {"_sparseVARboot_sim_VAR_cpp_both", (DL_FUNC) &_sparseVARboot_sim_VAR_cpp_both, 4},
    {"_sparseVARboot_boot_means_R", (DL_FUNC) &_sparseVARboot_boot_means_R, 22},
    {"_sparseVARboot_VAR_R", (DL_FUNC) &_sparseVARboot_VAR_R, 3},
    {"_sparseVARboot_sparseVAR_R", (DL_FUNC) &_sparseVARboot_sparseVAR_R, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_sparseVARboot(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
